CSCB58 Project File: Summer 2017

Team Member A
-------------
First Name: Jayatharani (Jaya)
Last Name: Thirugnanasampanthan
Student Number: 1000644822
UofT E-mail Address: j.thirugnanasampanthan@utoronto.ca

Team Member B
-------------
First Name: Wesley 
Last Name: Ma
Student Number: 1003228848
UofT E-mail Address: wesley.ma@mail.utoronto.ca

Team Member C 
-------------
First Name: Tianhao (Leo)
Last Name: Yao
Student Number: 1003404728
UofT E-mail Address: tianhao.yao@mail.utoronto.ca

Team Member D 
-------------
First Name: Perrin
Last Name: Le
Student Number: 1003529265
UofT E-mail Address: perrin.le@mail.utoronto.ca


Project Details
---------------

Project Title: SubtractSquare

Project Description: SubtractSquare is a two-player strategy game. A positive whole number is randomly generated as the starting value. The player whose turn it is chooses some square of a positive whole number (such as 1, 4, 9, 16,...) to subtract from the value, provided the chosen square is not larger. After subtracting, we have a new value and the next player chooses a square to subtract from it. The game play continues to alternate between the two players until no moves are possible. Whoever is about to play at that point loses!

Features: two-player mode, LED scoreboard, 30-second timer with 10-second warning flash countdown (timer also comes in different speeds), player’s input is “locked” when timer hits zero (which simulates the “load” key), randomly generated starting game state when “start” key is pressed, and the “forced move” generated at every game state is chosen when an invalid move is made (please read the documentation for "forced move" in LUTs.v)

Video URL: https://drive.google.com/file/d/0BwLvf73ym-VgVlk5NXprMU5NRWM/view?usp=sharing

Code URL: https://github.com/jthan13/SubtractSquare


Proposal
--------

Our team will be pair programming during the lab sessions. 

What do you plan to have completed by the end of the first lab session?:
TEAM A: Debug and test player vs. player module. 
TEAM B: Debug and test timer (to be displayed on HEX[7:6])and pseudo-random number generator (to be displayed on HEX[2:0]). Test that binary coded decimal converter works. Also debug code that displays game state on HEX[2:0] and subtrahend on HEX[5:4]. 

What do you plan to have completed by the end of the second lab session?:
TEAM A: Continue to debug and complete player vs player module. This module ties together game features. 
TEAM B: Test LFSR and if prepared before the week 2 lab, debug and test code using the LCD screen: we hope to use this screen to display the timer. Also assist TEAM A in debugging the player vs player module. 

What do you plan to have completed by the end of the third lab session?:
TEAM A & B: Of course we aim to have a finished product by the end of the session. We plan to use the first two hours debugging and testing the smaller modules before tying them together, and hopefully leaving the last hour for working on any additional features to our game.   

What is your backup plan if things don’t work out as planned?
We are going to build our “back-up” plan first, which is the player vs player game. Once this is completed, we will build on this code to implement the player vs computer opponent feature. Also, we’ve brainstormed many features, which include “easy” ones. 

(UPDATED: JUL 8): We are using our backup game as our project. Please see updated project description. 

What hardware will you need beyond the DE2 board?
Nothing else. 


Motivations
-----------

How does this project relate to the material covered in CSCB58? (UPDATED: JUL 8):
We learned in lecture how FSMs are used to model the behaviour of systems, and in lab we practiced designing FSMs to control a datapath. Our project directly overlaps with this concept; we implement a FSM to control our datapath, which calculates the next game state. Also, the game features make good use of the code written in previous labs (such as hex decoders, rate dividers, counters, shift registers, etc), and we have plans to modify them to fit our game requirements. 

Why is this project interesting/cool (for CSCB58 students, and for non CSCB58 students?):
If we can make the game be played against a computer opponent (which makes the strongest move possible in any game state), this would showcase some pretty neat AI stuff. We hope that our project inspires future CSCB58 students to move projects up the difficulty scale by introducing some AI. We also think that this project can easily be modified to be another game (such as tic-tac-toe), and so our code can act as a foundation for future projects. 

Aside from that, SubtractSquare is a strategy game, which means that with some smart thinking, a player can beat their opponent.  

Why did you personally choose this project?:
Implementing SubtractSquare was one of Jaya’s CSC148 assignments, and we thought it would be neat to add more features to this game. 

Attributions
------------

Provide a complete list of any external resources your project used (attributions should also be included in your code).  

Game instructions are taken from:
http://www.teach.cs.toronto.edu/~heap/148/W15/a1.pdf

LFSR is taken from: 
http://www.asic-world.com/examples/verilog/lfsr.html 


Updates
-------

WEEK 1: 

Team A debugged the modules that implement SubtractSquare as a single-player game, and Team B debugged the code for the timer, pseudo-random number generator, and LUT. The milestone for this week was to debug a two-player implementation of SubtractSquare. Our attempt to do this was not futile as we realized too late that we misused the FSM and the datapath that it controls: our datapath should have initially been designed to compute the next game state and next player, and the FSM should output the values that the various control signals should have cycle by cycle. We have submitted block_diagram.pdf, which illustrates our new datapath and FSM. We believe though that implementing the two-player feature is a relatively straightforward task: we intend to implement a T flip flop that flips its output (1-bit output represents a player) when it receives a signal that a move has been made by a player (regardless of whether this move is "valid" since  we have decided on "forcing" the player to input a specific move *). Our explanation of the overlap between the project and the course material has been modified under the 'motivations' section to reflect our new understanding of how a FSM is used to control a datapath. 

Next week we plan to debug our new implementation of the FSM and datapath modules, which unfortunately means that the AI feature will not be implemented as planned. Our project description and proposal have also been updated to reflect this change. 

* Please see "How_the_game_runs.txt" for further details. 


WEEK 2:

Team A (and Team B) began debugging the modules implementing SubtractSquare as a two-player game, and Team B debugged the score feature and tested the LFSR. We had intended to use the LCD screen on the DE2 board to display the timer (which frees up HEX6 & HEX7 to display the score). However, a decision was made towards the end of the lab session to use a shift register wired to some LEDs for the score feature. We are happy with this choice since we showcase course material and we move up the project on the difficulty scale. 

Our deliverable for the second week was to have finished a bulk of the project, which resulted in us having prepared nearly complete (and huge) modules to debug in lab. We initially thought this would be a straightforward task since we tested the individual features beforehand. Unfortunately, debugging was difficult during the lab session since we had trouble tracing the source to our problems and we felt overwhelmed with the size of our modules. Consequently, more "successful" debugging was done outside of lab time. 

In the lab, we worked on downsizing our modules (which we have submitted on MarkUs). In the process of testing, we discovered some neat debugging tricks and tools. For example, when debugging the FSM, we used a rate divider to slow down the clock speed so that we could observe the LEDs flash (which were wired to the outputs for debugging) as the FSM transitioned from state to state. This helped us tremendously since we were able to conclude that the datapath module was actually the root of our problems. Note: this particular test is implemented in control.v. 

This experience has equipped us to become better at debugging, and we hope that debugging and testing in the final week goes more smoothly. Our plans for week 3 have been updated with our new milestones. 


WEEK 3:

During the last lab session, Team A continued debugging a simplified version of the datapath and FSM. As we spent time outside of this lab unsuccessfully fixing this code, we spoke with Vlad ASAP to discuss our problem. Fortunately, using Vlad’s suggestion to redesign our datapath by removing unnecessary registers, our code worked. Then for the rest of the lab session, we added and debugged features that interact with our datapath and FSM (eg. “forced move” feature, pseudo-random generator). This was a relatively straightforward task because we submitted code in week 2 that implemented most our desired features, and so we simply had to make minor changes in those files to reflect our newly designed datapath and FSM. 

Team B also spoke with Vlad while debugging the shift register (which is used to keep track of the players’ scores). Once the shift register was properly implemented, we brainstormed and coded a 10-second warning feature that interacts with the timer module. Team B also helped Team A in updating the week 2 test files. 

Outside of lab time, we worked on putting the project together and adding documentation to our code. 


BRIEF REFLECTION:

Although the AI made was not implemented, we are pleased with the final result. Working on this assignment has solidify our understanding of control paths and datapaths, and made us look at the lab 5 starter code in a different way. We also learned about (and addressed in week 3) propagation timing issues when implementing our FSM and datapath. This problem raises many questions about how large-scale circuits deal with timing delays. 

